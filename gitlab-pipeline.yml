.functions: &functions |
  function check_command_exists () {
    hash $1 2>/dev/null || { echo >&2 "This script requires $1 but not installed. Aborting."; exit 1; }
  }

  function check_image_input_type () {
    IMAGE_REGEX='^([A-Fa-f0-9]{12}|[A-Fa-f0-9]{64})$'
    IMAGE_INPUT_TYPE=''
    if [[ $1 =~ $IMAGE_REGEX ]]; then
      IMAGE_INPUT_TYPE='ID'
    else
      IMAGE_INPUT_TYPE='NAME'
    fi
    echo ${IMAGE_INPUT_TYPE}
  }

  function get_image_id_from_name () {
    IMAGE_NAME=${REGISTRY}/${PROJECT_STREAM}/${REG_NAMESPACE}/${CI_PROJECT_NAME}
    IMAGE_TAG="${PROJECT_VERSION}-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}"
    docker pull ${IMAGE_NAME}:${IMAGE_TAG}
    docker_command="$DOCKER images ${IMAGE_NAME}:${IMAGE_TAG}"
    echo ${docker_command}
    IMAGE_ID=$($docker_command | head -2 | tail -1 | awk '{print $3}')
    echo ${IMAGE_ID}

    if [[ "${IMAGE_ID}" == "IMAGE" ]]; then
      echo "Error! No image found by name $1"
      exit 2
    fi
  }

  function gcloudAuth () {
    GOOGLE_CREDENTIALS="<Google Service Account>"
    gcloud auth activate-service-account --key-file ${GOOGLE_CREDENTIALS}
    docker login -u _json_key --password-stdin https://gcr.io < ${GOOGLE_CREDENTIALS}
    rm ${GOOGLE_CREDENTIALS}
  }

  function get_result () {
    echo "Getting result for ${IMAGE_ID}"
    CURL_COMMAND="$CURL -s -X GET ${GET_IMAGE_VULNS_URL} -u ${QUALYS_USERNAME}:${QUALYS_PASSWORD} -L -w\\n%{http_code} -o ${IMAGE_ID}.json"
    HTTP_CODE=$($CURL_COMMAND | tail -n 1)
    echo "HTTP Code - ${HTTP_CODE}"
    if [ "$HTTP_CODE" == "200" ]; then
      check_vulns
    fi
  }

  function check_vulns () {
    echo "Checking if vulns reported on ${IMAGE_ID}"
    VULNS_ABSENT=$($JQ '.vulnerabilities==null' ${IMAGE_ID}.json)
    if [[ "$VULNS_ABSENT" == "true" ]]; then
      VULNS_AVAILABLE=false
    else
      VULNS_AVAILABLE=true
    fi
    echo "Vulns Available - ${VULNS_AVAILABLE}"
  }
  #
  # function eval_result () {
  #   RESULT="$(jq -r [.vulnerabilities[] | select(.severity>=5) | {qid, title- .title}] ${IMAGE_ID}.json)"
  #   EVAL_RESULT_LENGTH="$(${RESULT} | length as $vuln_count | if $vuln_count > 0 then error("\($vuln_count) vulnerabilities with severity 5 found!") else "No vulnerabilities found with severity 5" end"
  #   echo ${EVAL_RESULT_LENGTH}
  # }

stages:
    - containerScan

cscan:
  stage: containerScan
  image:
    name: gcr.io/<GCP_PROJECT>/<Parent Repo>/container-scan:1.2.5-22
  variables:
    DOCKER_HOST: "tcp://localhost:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:19.03.1-dind
  only:
    refs:
      - schedules
      - master
      - merge_requests
  script:
    - *functions
    - |
       check_command_exists curl
       check_command_exists jq
       check_command_exists docker

       gcloudAuth

       CURL=$(which curl)
       JQ=$(which jq)
       DOCKER=$(which docker)

       check_image_input_type ${IMAGE}

       if [ "${IMAGE_INPUT_TYPE}" == "NAME" ]; then
         echo "Input (${IMAGE}) is image name. Script will now try to get the image id."
         get_image_id_from_name ${IMAGE}
         echo "Image id belonging to ${IMAGE} is: ${IMAGE_ID}"
       else
         IMAGE_ID=${IMAGE}
       fi

       echo "Image id belonging to ${IMAGE} is: ${IMAGE_ID}"
       GET_IMAGE_VULNS_URL="${QUALYS_API_SERVER}/csapi/v1.1/images/${IMAGE_ID}"
       echo ${GET_IMAGE_VULNS_URL}

       echo "Temporarily tagging image ${IMAGE} with qualys_scan_target:${IMAGE_ID}"
       echo "Qualys Sensor will untag it after scanning. In case this is the only tag present, Sensor will not remove it."
       `docker tag ${IMAGE_ID} qualys_scan_target:${IMAGE_ID}`

       get_result

       while [ "${HTTP_CODE}" -ne "200" -o "${VULNS_AVAILABLE}" != true ]
       do
         echo "Retrying after 10 seconds..."
         sleep 10
         get_result
       done

       #eval_result
